<?php

namespace Brasa\InventarioBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * MovimientosDetallesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class InvMovimientoDetalleRepository extends EntityRepository {
    /**
     * Devuelve los detalles de inventario agrupados por Item, Bodega y Lote
     * @param type $dateFechaDesde
     * @param type $dateFechaHasta
     * @return type Objeto de tipo movimientos detalles
     */
    public function DevMovimientosDetallesInventario($indCodigoItem, $strFechaDesde = "", $strFechaHasta = "") {
        $objRepositorio = $this->getEntityManager();              
        $objQuery = $objRepositorio->createQueryBuilder()
                ->select('md.codigoItemFk, md.codigoBodegaFk, md.loteFk, SUM(md.cantidadOperada) as cantidadOperada')                
                ->from('BrasaInventarioBundle:InvMovimientoDetalle', 'md')                
                ->leftJoin("md.movimientoRel", "m")
                ->where('md.operacionInventario != 0 AND md.estadoAutorizado = 1 AND md.codigoItemFk = ' . $indCodigoItem)
                ->groupBy('md.codigoItemFk, md.codigoBodegaFk, md.loteFk'); 
                
        if ($strFechaDesde != "" && $strFechaDesde != NULL) 
            $objQuery->andWhere("m.fecha > '" . $strFechaDesde . "'");
        
        if ($strFechaHasta != "" && $strFechaHasta != NULL) 
            $objQuery->andWhere("m.fecha <= '" . $strFechaHasta . "'");        
        $objQuery = $objQuery->getQuery();
        return $objQuery->getResult();                
    }
    
    /**
     * Devuelve los detalles de movimiento sin agrupacion y que tienen operacion
     * @param type $dateFechaDesde
     * @param type $dateFechaHasta
     * @return type Objeto de tipo movimientos detalle
     */
    public function DevMovimientosDetallesOperacion($dateFechaDesde = "", $dateFechaHasta = "", $intItem = "") {
        $em = $this->getEntityManager();
        $query = $em->createQueryBuilder()
                ->select('md.codigoDetalleMovimientoPk, md.codigoItemFk, md.codigoBodegaFk, md.loteFk, md.cantidadOperada')
                ->from('BrasaInventarioBundle:InvMovimientoDetalle', 'md')
                ->leftJoin("md.movimientoRel", "m")
                ->where('md.operacionInventario != 0 AND md.estadoAutorizado = 1')
                ->orderBy("m.fecha", 'ASC');
        
        if ($dateFechaDesde != Null && $dateFechaDesde != "")
            $query->andWhere("m.fecha >= '" . $dateFechaDesde . " 00:00:00'");
        
        if ($dateFechaHasta != Null && $dateFechaHasta != "")
            $query->andWhere("m.fecha <= '" . $dateFechaHasta . " 23:59:59'");
        
        if($intItem != "")
            $query->andWhere("md.codigoItemFk = " . $intItem);
        $objQuery = $query->getQuery();        
        return $objQuery->getResult();
    }
    
    /**
     * Devuelve los movimientos de inventario pero que generan costo
     * @param type $dateFechaDesde
     * @param type $dateFechaHasta
     * @param type $intItem
     * @return type
     */
    public function DevMovimientosDetallesGeneranCosto($dateFechaDesde = "", $dateFechaHasta = "", $intItem = "") {
        $em = $this->getEntityManager();
        $query = $em->createQueryBuilder()
                ->select('md.codigoDetalleMovimientoPk, md.cantidadOperada, md.costo, doc.generaCostoPromedio')
                ->from('BrasaInventarioBundle:InvMovimientoDetalle', 'md')
                ->leftJoin("md.movimientoRel", "m")
                ->leftJoin("m.documentoRel", "doc")
                ->where('md.operacionInventario != 0 AND md.estadoAutorizado = 1')
                ->orderBy("m.fecha", 'ASC');
        
        if ($dateFechaDesde != Null && $dateFechaDesde != "")
            $query->andWhere("m.fecha >= '" . $dateFechaDesde . " 00:00:00'");
        
        if ($dateFechaHasta != Null && $dateFechaHasta != "")
            $query->andWhere("m.fecha <= '" . $dateFechaHasta . " 23:59:59'");
        
        if($intItem != "")
            $query->andWhere("md.codigoItemFk = " . $intItem);
        
        $objQuery = $query->getQuery();        
        return $objQuery->getResult();
    }    
    
    /**
     * Devuelve un array con todos los detalles de movimiento segun parametros
     * @param integer $codigoItem El codigo del producto a consultar
     * @param integer $codigoDocumento El codigo del documento  a consultar
     * @param integer $codigoTercero El codigo del tercero a consultar
     * @param string $lote El lote a consultar
     * @param string $bodega La bodega a Consultar
     * @param date $dateDesde La fecha desde donde se consultaran los detalles
     * @param date $dateHasta La fecha hasta donde se consultaran los detalles
     * @return array Detalles de Movimiento 
     */
    public function DevMovimientosDetalles($codigoItem = null,$codigoDocumento = null,$codigoTercero = null,$lote = null,$bodega = null,$dateDesde = null,$dateHasta = null) {
        $em = $this->getEntityManager();
        $query = $em->createQueryBuilder()
                ->select('md')
                ->from('BrasaInventarioBundle:InvMovimientoDetalle', 'md')
                ->leftJoin("md.movimientoRel", "m")
                ->where('md.operacionInventario != :operacion')
                ->setParameter('operacion', 0)
                ->orderBy('m.fecha');

        if ($codigoItem != Null && $codigoItem != "")
            $query->andWhere('md.codigoItemFk = ' . $codigoItem);
        
        if ($codigoDocumento != Null && $codigoDocumento != "")
            $query->andWhere('m.codigoDocumentoFk = ' . $codigoDocumento);
        
        if ($codigoTercero != Null && $codigoTercero != "")
            $query->andWhere('m.codigoTerceroFk = ' . $codigoTercero);
        
        if ($lote != Null && $lote != "")
            $query->andWhere("md.loteFk ='" .$lote ."'");
        
        if ($bodega != Null && $bodega != "")
            $query->andWhere('md.codigoBodegaFk = ' . $bodega);
        
        if ($dateDesde != Null && $dateDesde != "") {
            $query->andWhere("m.fecha >='". $dateDesde." 00:00:00'");
        }
            
        if ($dateHasta != Null && $dateHasta != "")
            $query->andWhere("m.fecha <='". $dateHasta." 23:59:59'");
        
        $arMovimientosDetalles = $query->getQuery();

        return $arMovimientosDetalles->getResult();
    }

    public function DevMovDetItemLote($codigoMovimiento) {
        $em = $this->getEntityManager();
        $query = $em->createQueryBuilder()
                ->select('md.codigoItemFk, md.codigoBodegaFk, md.loteFk, SUM(md.cantidad) as cantidad, item.itemServicio')
                ->from('BrasaInventarioBundle:InvMovimientoDetalle', 'md')
                ->where('md.codigoMovimientoFk = :codigoMovimientoFk')
                ->andWhere('md.afectarRemision = 0')
                ->leftJoin('md.itemRel', 'item')
                ->groupBy('md.codigoItemFk, md.codigoBodegaFk, md.loteFk')
                ->setParameter('codigoMovimientoFk', $codigoMovimiento)
                ->getQuery();

        return $query->getResult();
    }    
    
    /**
     * Devuelve resumen de detalles para contabilizar por cuenta de compras
     * @param integer $codigoMovimiento codigo del movimiento que se va a procesar.
     * */
    public function DevResumenCuentaCompras($codigoMovimiento) {
        $em = $this->getEntityManager();
        $query = $em->createQueryBuilder()
                ->select('SUM(md.totalBruto) as totalBruto, item.cuentaCompras')
                ->from('BrasaInventarioBundle:InvMovimientoDetalle', 'md')
                ->leftJoin('md.itemRel', 'item')
                ->where('md.codigoMovimientoFk = :codigoMovimientoFk')
                ->groupBy('item.cuentaCompras')
                ->setParameter('codigoMovimientoFk', $codigoMovimiento)
                ->getQuery();

        return $query->getResult();
    }

    /**
     * Devuelve resumen de detalles para contabilizar por cuenta de compras
     * @param integer $codigoMovimiento codigo del movimiento que se va a procesar.
     * */
    public function DevResumenCuentaDevolucionCompras($codigoMovimiento) {
        $em = $this->getEntityManager();
        $query = $em->createQueryBuilder()
                ->select('SUM(md.totalBruto) as totalBruto, item.cuentaDevolucionCompras')
                ->from('BrasaInventarioBundle:InvMovimientoDetalle', 'md')
                ->leftJoin('md.itemRel', 'item')
                ->where('md.codigoMovimientoFk = :codigoMovimientoFk')
                ->groupBy('item.cuentaDevolucionCompras')
                ->setParameter('codigoMovimientoFk', $codigoMovimiento)
                ->getQuery();

        return $query->getResult();
    }    
    
    /**
     * Devuelve resumen de detalles para contabilizar por cuenta de compras
     * @param integer $codigoMovimiento codigo del movimiento que se va a procesar.
     * */
    public function DevResumenCuentaVentas($codigoMovimiento) {
        $em = $this->getEntityManager();
        $query = $em->createQueryBuilder()
                ->select('SUM(md.totalBruto) as totalBruto, item.cuentaVentas')
                ->from('BrasaInventarioBundle:InvMovimientoDetalle', 'md')
                ->leftJoin('md.itemRel', 'item')
                ->where('md.codigoMovimientoFk = :codigoMovimientoFk')
                ->groupBy('item.cuentaVentas')
                ->setParameter('codigoMovimientoFk', $codigoMovimiento)
                ->getQuery();

        return $query->getResult();
    }    
    
    /**
     * Devuelve resumen de detalles para contabilizar por cuenta de compras
     * @param integer $codigoMovimiento codigo del movimiento que se va a procesar.
     * */
    public function DevResumenCuentaDevolucionVentas($codigoMovimiento) {
        $em = $this->getEntityManager();
        $query = $em->createQueryBuilder()
                ->select('SUM(md.subTotal) as subTotal, item.cuentaDevolucionVentas')
                ->from('BrasaInventarioBundle:InvMovimientoDetalle', 'md')
                ->leftJoin('md.itemMD', 'item')
                ->where('md.codigoMovimientoFk = :codigoMovimientoFk')
                ->groupBy('item.cuentaDevolucionVentas')
                ->setParameter('codigoMovimientoFk', $codigoMovimiento)
                ->getQuery();

        return $query->getResult();
    }     
    
    /**
     * Devuelve resumen de detalles para contabilizar por cuenta de compras
     * Deve ir con esta funcion por si los item afectan varias cuentas del inventario
     * @param integer $codigoMovimiento codigo del movimiento que se va a procesar.
     * */
    public function DevResumenCuentaCostoVentas($codigoMovimiento) {
        $em = $this->getEntityManager();
        $query = $em->createQueryBuilder()
                ->select('SUM(md.totalCosto) as totalCosto, item.cuentaCosto')
                ->from('BrasaInventarioBundle:InvMovimientoDetalle', 'md')
                ->leftJoin('md.itemRel', 'item')
                ->where('md.codigoMovimientoFk = :codigoMovimientoFk')
                ->groupBy('item.cuentaCosto')
                ->setParameter('codigoMovimientoFk', $codigoMovimiento)
                ->getQuery();

        return $query->getResult();
    }    
    
    /**
     * Devuelve resumen de detalles para contabilizar por cuenta de compras
     * @param integer $codigoMovimiento codigo del movimiento que se va a procesar.
     * */
    public function DevResumenCuentaInventario($codigoMovimiento) {
        $em = $this->getEntityManager();
        $query = $em->createQueryBuilder()
                ->select('SUM(md.costo) as costo, item.cuentaInventario')
                ->from('BrasaInventarioBundle:InvMovimientoDetalle', 'md')
                ->leftJoin('md.itemRel', 'item')
                ->where('md.codigoMovimientoFk = :codigoMovimientoFk')
                ->groupBy('item.cuentaInventario')
                ->setParameter('codigoMovimientoFk', $codigoMovimiento)
                ->getQuery();

        return $query->getResult();
    }        

    /**
     * Devuelve un listado con los pedidos pendientes de un producto
     * @param intger $codigoProducto
     * @return array 
     */
    public function DevPedidosPendientes($codigoProducto) {
        $em = $this->getEntityManager();
        $query = $em->createQueryBuilder()
                ->select('md.cantidad, movimientos.fecha, movimientos.numeroMovimiento')
                ->from('BrasaInventarioBundle:InvMovimientoDetalle', 'md')
                ->leftJoin('md.movimientoRel', 'movimientos')
                ->leftJoin('movimientos.terceroRel', 'terceros')
                ->where('md.codigoItemFk = :codigoItemFk AND md.estadoAutorizado = 1 AND movimientos.codigoDocumentoFk = 4')
                ->setParameter('codigoItemFk', $codigoProducto)
                ->getQuery();

        $arPedidosPendientes = $query->getResult();
        return $arPedidosPendientes;
    }
    
    /**
     * Devuelve un listado con las ordenes de compra pendientes de un producto
     * @param intger $codigoProducto
     * @return array 
     */
    public function DevOrdenesPendientes($codigoProducto) {
        $em = $this->getEntityManager();
        $query = $em->createQueryBuilder()
                ->select('md.cantidad')
                ->from('BrasaInventarioBundle:InvMovimientoDetalle', 'md')
                ->leftJoin('md.movimientoRel', 'movimientos')
                ->where('md.codigoItemFk = :codigoItemFk AND md.estadoAutorizado = 1 AND movimientos.codigoDocumentoFk = 4')
                ->setParameter('codigoItemFk', $codigoProducto)
                ->getQuery();

        $arPedidosPendientes = $query->getResult();
        return $arPedidosPendientes;
    }
    
    /**
     * 
     * @param integer $codigoMovimientoDetalle 
     */
    public function EstableceLoteMovimientoDetalle($codigoMovimientoDetalle) {
        $em = $this->getEntityManager();
        $arMovimientoDetalle = new \Brasa\InventarioBundle\Entity\InvMovimientoDetalle();
        $arMovimientoDetalle = $em->getRepository('BrasaInventarioBundle:InvMovimientoDetalle')->find($codigoMovimientoDetalle);
        $arLotes = new \Brasa\InventarioBundle\Entity\InvLote();
        $arLotes = $em->getRepository('BrasaInventarioBundle:InvLote')->findOneBy(array('codigoItemFk' => $arMovimientoDetalle->getItemMD()->getCodigoItemPk()));
        if(count($arLotes) > 0) {
            $arMovimientoDetalle->setLoteFk($arLotes->getLoteFk());
            $arMovimientoDetalle->setCodigoBodegaFk($arLotes->getCodigoBodegaFk());
            $arMovimientoDetalle->setFechaVencimiento($arLotes->getFechaVencimiento());
            $em->persist($arMovimientoDetalle);
            $em->flush();             
        }
    }
    
    public function DevNroDetallesMovimiento($codigoMovimiento) {
        $em = $this->getEntityManager();
        $query = $em->createQueryBuilder()
                ->select('COUNT(md.codigoDetalleMovimientoPk) as cantidad')
                ->from('BrasaInventarioBundle:InvMovimientoDetalle', 'md')
                ->where('md.codigoMovimientoFk = :codigoMovimientoFk')                
                ->setParameter('codigoMovimientoFk', $codigoMovimiento)
                ->getQuery();
        
        $arMovimientosDetalles = $query->getResult();
        return $arMovimientosDetalles[0]['cantidad'];
    }    
    
    public function DevMovimientosDetallesPendientesAfectar($codigoDocumentoControl, $intCodigoTerceroPk) {        
        $em = $this->getEntityManager();
        $arDocumento = new \Brasa\InventarioBundle\Entity\InvDocumento();
        $arDocumento = $em->getRepository('BrasaInventarioBundle:InvDocumento')->find($codigoDocumentoControl);
        $arDocumentoConfiguracion = new \Brasa\InventarioBundle\Entity\InvDocumento();
        $arDocumentoConfiguracion = $em->getRepository('BrasaInventarioBundle:InvDocumentoConfiguracion')->find($codigoDocumentoControl);
        $strSql = "SELECT
                    inv_movimientos_detalles.codigo_detalle_movimiento_pk AS codigoDetalleMovimientoPk,
                    inv_movimientos_detalles.codigo_item_fk AS codigoItemPk,
                    inv_item.descripcion AS descripcion,
                    inv_movimientos_detalles.lote_fk AS loteFk,
                    inv_movimientos_detalles.codigo_bodega_fk AS codigoBodegaFk,
                    inv_movimientos_detalles.vr_precio AS vrPrecio,                    
                    inv_movimientos_detalles.porcentaje_iva AS porcentajeIva,
                    inv_movimientos_detalles.vr_subtotal AS vrSubTotal,
                    inv_movimientos_detalles.porcentaje_descuento AS porcentajeDescuento,
                    inv_movimientos_detalles.vr_total AS vrTotal,
                    inv_movimientos_detalles.cantidad AS cantidad,
                    inv_movimientos_detalles.cantidad_afectada AS cantidadAfectada,
                    (inv_movimientos_detalles.cantidad - inv_movimientos_detalles.cantidad_afectada) AS cantidadPendiente,
                    inv_documentos.nombre_documento AS nombreDocumento,                    
                    inv_movimientos.numero_movimiento AS numeroDocumento,
                    gen_terceros.nombre_corto AS nombreCortoTercero
                   FROM
                        (
                        inv_documentos_control
                            LEFT JOIN (
                                inv_movimientos_detalles
                                RIGHT JOIN inv_movimientos ON inv_movimientos_detalles.codigo_movimiento_fk = inv_movimientos.codigo_movimiento_pk
                            ) ON inv_documentos_control.codigo_documento_hijo_pk = inv_movimientos.codigo_documento_fk
                        )
                        LEFT JOIN inv_documentos ON inv_movimientos.codigo_documento_fk = inv_documentos.codigo_documento_pk
                        LEFT JOIN inv_item ON inv_movimientos_detalles.codigo_item_fk = inv_item.codigo_item_pk
                        LEFT JOIN gen_terceros ON inv_movimientos.codigo_tercero_fk = gen_terceros.codigo_tercero_pk                        
                    WHERE inv_documentos_control.codigo_documento_padre_pk = " . $codigoDocumentoControl. "
                    AND (inv_movimientos_detalles.cantidad - inv_movimientos_detalles.cantidad_afectada) > 0 
                    AND inv_movimientos.estado_impreso = 1 
                    AND inv_movimientos.estado_anulado = 0" ;
        
        if($arDocumentoConfiguracion->getExigeTerceroDocumentoControl() == 1)        
            $strSql .= " AND inv_movimientos.codigo_tercero_fk = " . $intCodigoTerceroPk;
        
        $objCon = $em->getConnection();
        $arMovimientosDetalles = $objCon->executeQuery($strSql);
        $arMovimientosDetalles = $arMovimientosDetalles->fetchAll();
        return $arMovimientosDetalles;        
    } 
    
     /**
     * Devuelve un listado con los movimientos detalles pendientes segun filtro
     * @param integer $codigoDocumento
     * @param integer $codigoDocumentoTipo
     * @return array movimientos_detalles
     */
    public function DevMovimientosDetallesPendientes($codigoDocumento = null, $codigoDocumentoTipo = null) {
        $em = $this->getEntityManager();
        $query = $em->createQueryBuilder()
                ->select('md')
                ->from('BrasaInventarioBundle:InvMovimientoDetalle', 'md')
                ->where('(md.cantidad - md.cantidadAfectada) > 0 AND md.estadoAutorizado = 1 AND md.estadoCerrado = 0')
                ->leftJoin("md.movimientoRel", "m");
        
        if ($codigoDocumento != Null && $codigoDocumento != "" && $codigoDocumento != 0)
            $query->andWhere('m.codigoDocumentoFk = ' . $codigoDocumento);

        if ($codigoDocumentoTipo != Null && $codigoDocumentoTipo != "" && $codigoDocumentoTipo != 0)
            $query->andWhere('m.codigoDocumentoTipoFk = ' . $codigoDocumentoTipo);
        
        $arMovimientosDetalles = $query->getQuery();

        return $arMovimientosDetalles->getResult();
    }    
    
    /**
     * Calcular el costo promedio
     * @param type $intExistenciaAnterior
     * @param type $intCantidadIngreso
     * @param type $douCostoPromedio
     * @param type $douCostoIngreso
     * @return int
     */
    public static function CacularCostoPromedio($intExistenciaAnterior = 0, $intCantidadIngreso = 0, $douCostoPromedio = 0, $douCostoIngreso = 0) {        
        $douCostoPromedioResultante = $douCostoIngreso;
        if($intExistenciaAnterior != 0)
            $douCostoPromedioResultante = (($intExistenciaAnterior * $douCostoPromedio) + (($intCantidadIngreso * $douCostoIngreso))) / $intExistenciaAnterior;        
        return $douCostoPromedioResultante;
    }    
 
    /**
     * Devuelve un array con el resumen (suma) subtotal de movimientos detalles
     * @param type $dateFechaDesde
     * @param type $dateFechaHasta
     * @param type $intItem
     */
    public function DevMovimientosDetallesResumen($dateFechaDesde = "", $dateFechaHasta, $intCodigoItem = "", $intCodigoDocumento = "", $intCodigoTipoDocumento = "") {
        $em = $this->getEntityManager();
        $query = $em->createQueryBuilder()
                ->select('SUM(md.subTotal * doc.operacionComercial)')
                ->from('BrasaInventarioBundle:InvMovimientoDetalle', 'md')
                ->leftJoin("md.movimientoRel", "m")
                ->leftJoin("m.documentoRel", "doc")
                ->where('m.codigoDocumentoTipoFk = ' . $intCodigoTipoDocumento)
                ->orderBy("m.fecha", 'ASC');
        
        if ($dateFechaDesde != Null && $dateFechaDesde != "")
            $query->andWhere("m.fecha >= '" . $dateFechaDesde . " 00:00:00'");
        
        if ($dateFechaHasta != Null && $dateFechaHasta != "")
            $query->andWhere("m.fecha <= '" . $dateFechaHasta . " 23:59:59'");
        
        if($intCodigoItem != "")
            $query->andWhere("md.codigoItemFk = " . $intCodigoItem);
        
        $objQuery = $query->getQuery();        
        return $objQuery->getResult();        
    }
    
    public function CrearDetalleTraslado($intMovimientoDetalle) {
        $em = $this->getEntityManager();
        $arMovimientoDetalle = new \Brasa\InventarioBundle\Entity\InvMovimientoDetalle();
        $arMovimientoDetalle = $em->getRepository('BrasaInventarioBundle:InvMovimientoDetalle')->find($intMovimientoDetalle);
        $arMovimientoDetalleEntrada = new \Brasa\InventarioBundle\Entity\InvMovimientoDetalle();
        $arMovimientoDetalleSalida = new \Brasa\InventarioBundle\Entity\InvMovimientoDetalle();
        //Salida
        $arMovimientoDetalleSalida = clone $arMovimientoDetalle;
        $arMovimientoDetalleSalida->setOperacionInventario(-1);
        $arMovimientoDetalleSalida->setCantidadOperada($arMovimientoDetalle->getCantidad()*-1);        
        $arMovimientoDetalleSalida->setCodigoBodegaDestinoFk(null);
        
        //Entrada
        $arMovimientoDetalleEntrada = clone $arMovimientoDetalle;
        $arMovimientoDetalleEntrada->setOperacionInventario(1);
        $arMovimientoDetalleEntrada->setCantidadOperada($arMovimientoDetalle->getCantidad());        
        $arMovimientoDetalleEntrada->setCodigoBodegaFk($arMovimientoDetalle->getCodigoBodegaDestinoFk());
        $arMovimientoDetalleEntrada->setCodigoBodegaDestinoFk(null);
        
        $em->persist($arMovimientoDetalleEntrada);
        $em->flush();
        
        $em->persist($arMovimientoDetalleSalida);
        $em->flush();        
    }
    
    /**
     * Devuelve cantidades pendientes por item, lote y bodega
     * @return type
     */
    public function DevRemisionesPendientesItemBodegaLote() {
        $em = $this->getEntityManager();
        $query = $em->createQueryBuilder()
                ->select('md.codigoItemFk, md.codigoBodegaFk, md.loteFk, SUM(md.cantidad - md.cantidadAfectada) as cantidad')
                ->from('BrasaInventarioBundle:InvMovimientoDetalle', 'md')
                ->where('movimiento.codigoDocumentoTipoFk = 9')
                ->andWhere('movimiento.estadoAutorizado = 1')
                ->leftJoin('md.movimientoRel', 'movimiento')
                ->groupBy('md.codigoItemFk, md.codigoBodegaFk, md.loteFk')                
                ->getQuery();
        return $query->getResult();
    } 
    
    public function numeroRegistros($codigo) {        
        $em = $this->getEntityManager();
        $intNumeroRegistros = 0;
        $dql   = "SELECT COUNT(md.codigoDetalleMovimientoPk) as numeroRegistros FROM BrasaInventarioBundle:InvMovimientoDetalle md "
                . "WHERE md.codigoMovimientoFk = " . $codigo;
        $query = $em->createQuery($dql);
        $arrMovimientoDetalles = $query->getSingleResult(); 
        if($arrMovimientoDetalles) {
            $intNumeroRegistros = $arrMovimientoDetalles['numeroRegistros'];
        }
        return $intNumeroRegistros;
    }
    
    public function eliminarSeleccionados($arrSeleccionados) {        
        if(count($arrSeleccionados) > 0) {
            $em = $this->getEntityManager();
            foreach ($arrSeleccionados AS $codigo) {  
                $arMovimientoDetalle = $em->getRepository('BrasaInventarioBundle:InvMovimientoDetalle')->find($codigo);                                                                   
                $em->remove($arMovimientoDetalle);                                                                          
            }                                         
            $em->flush();         
        }
        
    }
}