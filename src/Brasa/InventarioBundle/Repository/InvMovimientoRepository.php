<?php

namespace Brasa\InventarioBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * MovimientosRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class InvMovimientoRepository extends EntityRepository {

    /**
     * Cambia el estado de un movimiento a autorizado
     * @param integer $codigoMovimiento codigo del movimiento que se va a procesar.
     * @param objeto $em la interface para manejar las entidades
     * */
    public function Autorizar($codigoMovimiento) {
        try {
            $em = $this->getEntityManager();
            $strValidacion = "";
            $arMovimiento = new \Brasa\InventarioBundle\Entity\InvMovimiento();
            $arMovimiento = $em->getRepository('BrasaInventarioBundle:InvMovimiento')->find($codigoMovimiento);

            $arDocumento = new \Brasa\InventarioBundle\Entity\InvDocumento();
            $arDocumento = $em->getRepository('BrasaInventarioBundle:InvDocumento')->find($arMovimiento->getCodigoDocumentoFk());

            //Solo se pueden autorizar los movimientos que no esten autorizados
            if ($arMovimiento->getEstadoAutorizado() == 0) {
                $arMovimientoDetalleAct = new \Brasa\InventarioBundle\Entity\InvMovimientoDetalle();
                $arMovimientosDetalle = new \Brasa\InventarioBundle\Entity\InvMovimientoDetalle();
                $arMovimientosDetalle = $em->getRepository('BrasaInventarioBundle:InvMovimientoDetalle')->findBy(array('codigoMovimientoFk' => $codigoMovimiento));
                if(count($arMovimientosDetalle) > 0) {
                    //Validar datos y disponibles entradas, salidas, remisiones
                    if ($arDocumento->getOperacionInventario() != 0 || $arMovimiento->getDocumentoRel()->getCodigoDocumentoTipoFk() == 9) {
                        $intPosicion = 0;
                        while ($strValidacion == "" && $intPosicion < count($arMovimientosDetalle)) {
                            if (!is_numeric($arMovimientosDetalle[$intPosicion]->getCantidad()))
                                $strValidacion = "No ha especificado una candidad, ";
                            if ($arMovimientosDetalle[$intPosicion]->getLoteFk() == "")
                                $strValidacion .= "No ha especificado un lote, ";
                            if ($arMovimientosDetalle[$intPosicion]->getCodigoBodegaFk() == "")
                                $strValidacion .= "No ha especificado una a bodega.";                            
                            if($strValidacion != "")
                                $strValidacion = "Error en el detalle " . $arMovimientosDetalle[$intPosicion]->getCodigoDetalleMovimientoPk() . " " . $arMovimientosDetalle[$intPosicion]->getCodigoItemFk() . "-" . $arMovimientosDetalle[$intPosicion]->getItemRel()->getDescripcion() . " Error: " . $strValidacion;
                            $intPosicion++;
                        }
                        
                        //Validar si disponibles de las cantidades de salida agrupadas por item, lote, bodega
                        if (($arDocumento->getOperacionInventario() == -1 || $arMovimiento->getDocumentoRel()->getCodigoDocumentoTipoFk() == 9) && $strValidacion == "") {
                            $intPosicion = 0;
                            $arMovDetLoteItem = $em->getRepository('BrasaInventarioBundle:InvMovimientoDetalle')->DevMovDetItemLote($codigoMovimiento);
                            while ($strValidacion == "" && $intPosicion < count($arMovDetLoteItem)) {
                                //No aplica para items de servicio
                                if($arMovDetLoteItem[$intPosicion]['itemServicio'] == 0) {
                                    if(!$em->getRepository('BrasaInventarioBundle:InvLote')->ValidarDisponible($arMovDetLoteItem[$intPosicion]['codigoItemFk'], $arMovDetLoteItem[$intPosicion]['codigoBodegaFk'], $arMovDetLoteItem[$intPosicion]['loteFk'], $arMovDetLoteItem[$intPosicion]['cantidad']))
                                        $strValidacion = "Error validando las existencias del Item: " . $arMovDetLoteItem[$intPosicion]['codigoItemFk'] . " Lote " . $arMovDetLoteItem[$intPosicion]['loteFk'] . " Bodega " . $arMovDetLoteItem[$intPosicion]['codigoBodegaFk'];
                                }
                                $intPosicion++;
                            }
                        }
                    }

                    //Validar datos traslados
                    if ($arMovimiento->getDocumentoRel()->getCodigoDocumentoTipoFk() == 10) {
                        $intPosicion = 0;
                        while ($strValidacion == "" && $intPosicion < count($arMovimientosDetalle)) {
                            if (!is_numeric($arMovimientosDetalle[$intPosicion]->getCantidad()))
                                $strValidacion = "No ha especificado una candidad, ";
                            if ($arMovimientosDetalle[$intPosicion]->getLoteFk() == "")
                                $strValidacion .= "No ha especificado un lote, ";
                            if ($arMovimientosDetalle[$intPosicion]->getCodigoBodegaFk() == "")
                                $strValidacion .= "No ha especificado una a bodega, ";                            
                            if ($arMovimientosDetalle[$intPosicion]->getCodigoBodegaDestinoFk() == "")
                                $strValidacion .= "No ha especificado una a bodega destino valida.";
                            if ($arMovimientosDetalle[$intPosicion]->getCodigoBodegaDestinoFk() != "") {
                                $arBodega = new \Brasa\InventarioBundle\Entity\InvBodega();
                                $arBodega = $em->getRepository('BrasaInventarioBundle:InvBodega')->find($arMovimientosDetalle[$intPosicion]->getCodigoBodegaDestinoFk());
                                if(count($arBodega) <= 0)
                                    $strValidacion .= "No ha especificado una a bodega destino valida.";
                            }
                            if($strValidacion != "")
                                $strValidacion = "Error en el detalle " . $arMovimientosDetalle[$intPosicion]->getCodigoDetalleMovimientoPk() . " " . $arMovimientosDetalle[$intPosicion]->getCodigoItemFk() . "-" . $arMovimientosDetalle[$intPosicion]->getItemRel()->getDescripcion() . " Error: " . $strValidacion;
                            $intPosicion++;
                        }
                        
                        //Validar si existen las cantidades de salida agrupadas por item, lote, bodega
                        if ($strValidacion == "") {
                            $intPosicion = 0;
                            $arMovDetLoteItem = $em->getRepository('BrasaInventarioBundle:InvMovimientoDetalle')->DevMovDetItemLote($codigoMovimiento);
                            while ($strValidacion == "" && $intPosicion < count($arMovDetLoteItem)) {
                                //No aplica para items de servicio
                                if($arMovDetLoteItem[$intPosicion]['itemServicio'] == 0) {
                                    if(!$em->getRepository('BrasaInventarioBundle:InvLote')->ValidarExistencia($arMovDetLoteItem[$intPosicion]['codigoItemFk'], $arMovDetLoteItem[$intPosicion]['codigoBodegaFk'], $arMovDetLoteItem[$intPosicion]['loteFk'], $arMovDetLoteItem[$intPosicion]['cantidad']))
                                        $strValidacion = "Error validando las existencias del Item: " . $arMovDetLoteItem[$intPosicion]['codigoItemFk'] . " Lote " . $arMovDetLoteItem[$intPosicion]['loteFk'] . " Bodega " . $arMovDetLoteItem[$intPosicion]['codigoBodegaFk'];
                                }
                                $intPosicion++;
                            }
                        }
                    }                                                           
                    
                    //Ejecutar inventario
                    if ($strValidacion == "") {
                        foreach ($arMovimientosDetalle as $arMovimientoDetalle) {
                            $arMovimientoDetalleAct = $em->getRepository('BrasaInventarioBundle:InvMovimientoDetalle')->find($arMovimientoDetalle->getCodigoDetalleMovimientoPk());
                            $arMovimientoDetalleAct->setEstadoAutorizado(1);
                            $intOperacionInventario = $em->getRepository('BrasaInventarioBundle:InvItem')->DevOperacionInventario($arMovimiento->getDocumentoRel()->getOperacionInventario(), $arMovimientoDetalle->getItemRel()->getItemServicio());
                            $arMovimientoDetalleAct->setCantidadOperada($arMovimientoDetalle->getCantidad() * $intOperacionInventario);
                            $arMovimientoDetalleAct->setOperacionInventario($intOperacionInventario);
                            //Si es un documento generador de costo
                            if($arMovimiento->getDocumentoRel()->getGeneraCostoPromedio() == 1) {
                                $arMovimientoDetalleAct->setVrCosto($arMovimientoDetalleAct->getVrPrecio());
                                //Calcular costo promedio y asignarlo al item
                            }
                            else
                                $arMovimientoDetalleAct->setVrCosto($arMovimientoDetalleAct->getItemRel()->getVrCostoPromedio());
                            $em->persist($arMovimientoDetalleAct);
                            $em->flush();
                            
                            //Documentos con operacion 1 o -1
                            if ($intOperacionInventario != 0) {
                                //Mueve la existencia
                                $em->getRepository('BrasaInventarioBundle:InvLote')->MoverExistencia($arMovimientoDetalle->getCodigoItemFk(), $arMovimientoDetalle->getCodigoBodegaFk(), $arMovimientoDetalle->getLoteFk(), $arDocumento->getOperacionInventario(), $arMovimientoDetalle->getCantidad(), $arMovimientoDetalle->getFechaVencimiento());
                                //Mueve remisiones
                                if($arMovimientoDetalle->getAfectarRemision() == 1) {
                                    $em->getRepository('BrasaInventarioBundle:InvLote')->MoverRemision($arMovimientoDetalle->getCodigoItemFk(), $arMovimientoDetalle->getCodigoBodegaFk(), $arMovimientoDetalle->getLoteFk(), -1, $arMovimientoDetalle->getCantidad(), $arMovimientoDetalle->getFechaVencimiento());                                
                                }
                            }
                            //Mover cantidades remisionadas
                            if($arMovimiento->getDocumentoRel()->getCodigoDocumentoTipoFk() == 9) {
                                $em->getRepository('BrasaInventarioBundle:InvLote')->MoverRemision($arMovimientoDetalle->getCodigoItemFk(), $arMovimientoDetalle->getCodigoBodegaFk(), $arMovimientoDetalle->getLoteFk(), 1, $arMovimientoDetalle->getCantidad(), $arMovimientoDetalle->getFechaVencimiento());                                
                            }
                            
                            //Traslados
                            if($arMovimiento->getDocumentoRel()->getCodigoDocumentoTipoFk() == 10) {
                                $em->getRepository('BrasaInventarioBundle:InvMovimientoDetalle')->CrearDetalleTraslado($arMovimientoDetalle->getCodigoDetalleMovimientoPk());
                            }
                        }

                        //Ejecutar inventario traslados
                        if($arMovimiento->getDocumentoRel()->getCodigoDocumentoTipoFk() == 10) {
                            $arMovimientosDetalleTraslado = new \Brasa\InventarioBundle\Entity\InvMovimientoDetalle();
                            $arMovimientosDetalleTraslado = $em->getRepository('BrasaInventarioBundle:InvMovimientoDetalle')->findBy(array('codigoMovimientoFk' => $codigoMovimiento));
                            foreach ($arMovimientosDetalleTraslado as $arMovimientoDetalleTraslado) {
                                if ($arMovimientoDetalleTraslado->getOperacionInventario() != 0) {
                                    $em->getRepository('BrasaInventarioBundle:InvLote')->MoverExistencia($arMovimientoDetalleTraslado->getCodigoItemFk(), $arMovimientoDetalleTraslado->getCodigoBodegaFk(), $arMovimientoDetalleTraslado->getLoteFk(), $arMovimientoDetalleTraslado->getOperacionInventario(), $arMovimientoDetalleTraslado->getCantidad(), $arMovimientoDetalleTraslado->getFechaVencimiento());
                                }
                            }
                        }

                        $arMovimiento->setEstadoAutorizado(1);

                        if($arDocumento->getOperacionInventario() == -1)
                            $arMovimiento->setFecha(date_create(date('Y-m-d H:i:s')));

                        if($arMovimiento->getNumeroMovimiento() == 0) {
                            if($arDocumento->getAsignarConsecutivoImpresion() == 0)
                                $arMovimiento->setNumeroMovimiento ($em->getRepository('BrasaInventarioBundle:InvMovimiento')->DevConsecutivo($arDocumento->getCodigoDocumentoPk()));
                        }

                        $em->persist($arMovimiento);
                        $em->flush();
                        $em->getRepository('BrasaInventarioBundle:InvMovimiento')->Liquidar($codigoMovimiento);
                        return "";
                    }
                    else
                        return $strValidacion;
                }
                else
                    return "El movimiento no tiene detalles";
            }
            else
                return "El documento ya esta autorizado";
        } catch (Exception $e) {
            return $e;
        }
    }

    /**
     * Cambia el estado de un movimiento a sin autorizar
     * @param integer $codigoMovimiento codigo del movimiento que se va a procesar.
     * @param objeto $em la interface para manejar las entidades
     * */
    public function DesAutorizar($codigoMovimiento) {
        try {
            $em = $this->getEntityManager();
            $strValidacion = "";
            $arMovimiento = new \Brasa\InventarioBundle\Entity\InvMovimiento();
            $arMovimiento = $em->getRepository('BrasaInventarioBundle:InvMovimiento')->find($codigoMovimiento);

            //Solo se pueden autorizar los movimientos que no esten autorizados
            if ($arMovimiento->getEstadoAutorizado() == 1 && $arMovimiento->getEstadoAnulado() == 0 && $arMovimiento->getEstadoImpreso() == 0) {
                if($arMovimiento->getValorDescuentoFinanciero() <= 0) {
                    if ($arMovimiento->getDocumentoRel()->getOperacionInventario() != 0) {
                        //Agrupar los detalles por item, lote y bodega para verificar las existencias
                        if ($arMovimiento->getDocumentoRel()->getOperacionInventario() * -1 == -1) {
                            $arMovDetLoteItem = $em->getRepository('BrasaInventarioBundle:InvMovimientoDetalle')->DevMovDetItemLote($codigoMovimiento);
                            $intPosicion = 0;
                            while ($strValidacion == "" && $intPosicion < count($arMovDetLoteItem)) {
                                //Validar si existen las cantidades de salida
                                if(!$em->getRepository('BrasaInventarioBundle:InvLote')->ValidarExistencia($arMovDetLoteItem[$intPosicion]['codigoItemFk'], $arMovDetLoteItem[$intPosicion]['codigoBodegaFk'], $arMovDetLoteItem[$intPosicion]['loteFk'], $arMovDetLoteItem[$intPosicion]['cantidad']))
                                    $strValidacion = "Error validando las existencias del Item: " . $arMovDetLoteItem[$intPosicion]['codigoItemFk'] . " Lote " . $arMovDetLoteItem[$intPosicion]['loteFk'] . " Bodega " . $arMovDetLoteItem[$intPosicion]['codigoBodegaFk'];
                                $intPosicion++;
                            }
                        }
                    }

                    //Ejecutar inventario
                    if ($strValidacion == "") {
                        $arMovimientoDetalleAct = new \Brasa\InventarioBundle\Entity\InvMovimientoDetalle();
                        $arMovimientosDetalle = new \Brasa\InventarioBundle\Entity\InvMovimientoDetalle();
                        $arMovimientosDetalle = $em->getRepository('BrasaInventarioBundle:InvMovimientoDetalle')->findBy(array('codigoMovimientoFk' => $codigoMovimiento));
                        foreach ($arMovimientosDetalle as $arMovimientoDetalle) {
                            $arMovimientoDetalleAct = $em->getRepository('BrasaInventarioBundle:InvMovimientoDetalle')->find($arMovimientoDetalle->getCodigoDetalleMovimientoPk());
                            $arMovimientoDetalleAct->setEstadoAutorizado(0);
                            $em->persist($arMovimientoDetalleAct);
                            $em->flush();

                            if ($arMovimiento->getDocumentoRel()->getOperacionInventario() != 0) {
                                $em->getRepository('BrasaInventarioBundle:InvLote')->MoverExistencia($arMovimientoDetalle->getCodigoItemFk(), $arMovimientoDetalle->getCodigoBodegaFk(), $arMovimientoDetalle->getLoteFk(), $arMovimientoDetalle->getOperacionInventario() * -1, $arMovimientoDetalle->getCantidad());
                                //Mueve remisiones
                                if($arMovimientoDetalle->getAfectarRemision() == 1) {
                                    $em->getRepository('BrasaInventarioBundle:InvLote')->MoverRemision($arMovimientoDetalle->getCodigoItemFk(), $arMovimientoDetalle->getCodigoBodegaFk(), $arMovimientoDetalle->getLoteFk(), 1, $arMovimientoDetalle->getCantidad(), $arMovimientoDetalle->getFechaVencimiento());                                
                                }                                
                            }                                
                        }
                        //Mover cantidades remisionadas
                        if($arMovimiento->getDocumentoRel()->getCodigoDocumentoTipoFk() == 9) {
                            $em->getRepository('BrasaInventarioBundle:InvLote')->MoverRemision($arMovimientoDetalle->getCodigoItemFk(), $arMovimientoDetalle->getCodigoBodegaFk(), $arMovimientoDetalle->getLoteFk(), -1, $arMovimientoDetalle->getCantidad(), $arMovimientoDetalle->getFechaVencimiento());                                
                        }                        
                        //Ejecutar inventario traslados
                        if($arMovimiento->getDocumentoRel()->getCodigoDocumentoTipoFk() == 10) {
                            $arMovimientosDetalleTraslado = new \Brasa\InventarioBundle\Entity\InvMovimientoDetalle();
                            $arMovimientosDetalleTraslado = $em->getRepository('BrasaInventarioBundle:InvMovimientoDetalle')->findBy(array('codigoMovimientoFk' => $codigoMovimiento));
                            foreach ($arMovimientosDetalleTraslado as $arMovimientoDetalleTraslado) {
                                if ($arMovimientoDetalleTraslado->getOperacionInventario() != 0) {
                                    $em->getRepository('BrasaInventarioBundle:InvLote')->MoverExistencia($arMovimientoDetalleTraslado->getCodigoItemFk(), $arMovimientoDetalleTraslado->getCodigoBodegaFk(), $arMovimientoDetalleTraslado->getLoteFk(), $arMovimientoDetalleTraslado->getOperacionInventario()*-1, $arMovimientoDetalleTraslado->getCantidad(), $arMovimientoDetalleTraslado->getFechaVencimiento());
                                    $arMovimientoDetalleEliminar = $em->getRepository('BrasaInventarioBundle:InvMovimientoDetalle')->find($arMovimientoDetalleTraslado->getCodigoDetalleMovimientoPk());
                                    $em->remove($arMovimientoDetalleEliminar);
                                    $em->flush();
                                }
                            }
                        }

                        $arMovimiento->setEstadoAutorizado(0);
                        $em->persist($arMovimiento);
                        $em->flush();
                        return "";
                    }
                    else
                        return $strValidacion;
                }
                else
                    return "Para desautorizar el movimiento no debe tener descuentos financieros";
            }
            else
                return "No se puede desautorizar el movimiento, verifique que este Autorizado, sin imprimir y sin anular";

        } catch (Exception $e) {
            return $e;
        }
    }

    /**
     * Cambia el estado de un movimiento a anulado
     * */
    public function Anular($codigoMovimiento) {
        try {
            $em = $this->getEntityManager();
            $strValidacion = "";
            $arMovimiento = new \Brasa\InventarioBundle\Entity\InvMovimiento();
            $arMovimiento = $em->getRepository('BrasaInventarioBundle:InvMovimiento')->find($codigoMovimiento);

            if ($arMovimiento->getEstadoAutorizado() == 1 && $arMovimiento->getEstadoAnulado() == 0 && $arMovimiento->getEstadoImpreso() == 1) {
                if ($arMovimiento->getDocumentoRel()->getOperacionInventario() != 0) {
                    //Agrupar los detalles por item, lote y bodega para verificar las existencias
                    if ($arMovimiento->getDocumentoRel()->getOperacionInventario() * -1 == -1) {
                        $arMovDetLoteItem = $em->getRepository('BrasaInventarioBundle:InvMovimientoDetalle')->DevMovDetItemLote($codigoMovimiento);
                        $intPosicion = 0;
                        while ($strValidacion == "" && $intPosicion < count($arMovDetLoteItem)) {
                            //Validar si existen las cantidades de salida
                            if(!$em->getRepository('BrasaInventarioBundle:InvLote')->ValidarExistencia($arMovDetLoteItem[$intPosicion]['codigoItemFk'], $arMovDetLoteItem[$intPosicion]['codigoBodegaFk'], $arMovDetLoteItem[$intPosicion]['loteFk'], $arMovDetLoteItem[$intPosicion]['cantidad']))
                                $strValidacion = "Error validando las existencias del Item: " . $arMovDetLoteItem[$intPosicion]['codigoItemFk'] . " Lote " . $arMovDetLoteItem[$intPosicion]['loteFk'] . " Bodega " . $arMovDetLoteItem[$intPosicion]['codigoBodegaFk'];
                            $intPosicion++;
                        }
                    }
                }

                //Ejecutar inventario
                if ($strValidacion == "") {
                    $arMovimientoDetalleAct = new \Brasa\InventarioBundle\Entity\InvMovimientoDetalle();
                    $arMovimientosDetalle = new \Brasa\InventarioBundle\Entity\InvMovimientoDetalle();
                    $arMovimientosDetalle = $em->getRepository('BrasaInventarioBundle:InvMovimientoDetalle')->findBy(array('codigoMovimientoFk' => $codigoMovimiento));
                    if($arMovimiento->getDocumentoRel()->getCodigoDocumentoTipoFk() != 10) {
                        foreach ($arMovimientosDetalle as $arMovimientoDetalle) {
                            if ($arMovimiento->getDocumentoRel()->getOperacionInventario() != 0)
                                //Se debe ejecutar primero el inventario antes de actualizar
                                $em->getRepository('BrasaInventarioBundle:InvLote')->MoverExistencia($arMovimientoDetalle->getCodigoItemFk(), $arMovimientoDetalle->getCodigoBodegaFk(), $arMovimientoDetalle->getLoteFk(), $arMovimientoDetalle->getOperacionInventario() * -1, $arMovimientoDetalle->getCantidad());

                            $arMovimientoDetalleAct = $em->getRepository('BrasaInventarioBundle:InvMovimientoDetalle')->find($arMovimientoDetalle->getCodigoDetalleMovimientoPk());
                            $arMovimientoDetalleAct->setEstadoAnulado(1);
                            $arMovimientoDetalleAct->setCantidad(0);
                            $arMovimientoDetalleAct->setVrPrecio(0);
                            $arMovimientoDetalleAct->setPorcentajeDescuento(0);
                            $arMovimientoDetalleAct->setCantidadOperada(0);
                            $arMovimientoDetalleAct->setVrSubTotal(0);
                            $arMovimientoDetalleAct->setVrBruto(0);
                            $arMovimientoDetalleAct->setVrDescuento(0);
                            $arMovimientoDetalleAct->setVrIva(0);
                            $arMovimientoDetalleAct->setVrTotal(0);
                            $arMovimientoDetalleAct->setVrCosto(0);
                            $arMovimientoDetalleAct->setVrCostoPromedio(0);
                            $em->persist($arMovimientoDetalleAct);
                            $em->flush();
                        }                        
                    }

                    //Ejecutar inventario traslados
                    if($arMovimiento->getDocumentoRel()->getCodigoDocumentoTipoFk() == 10) {
                        $arMovimientosDetalleTraslado = new \Brasa\InventarioBundle\Entity\InvMovimientoDetalle();
                        $arMovimientosDetalleTraslado = $em->getRepository('BrasaInventarioBundle:InvMovimientoDetalle')->findBy(array('codigoMovimientoFk' => $codigoMovimiento));
                        foreach ($arMovimientosDetalleTraslado as $arMovimientoDetalleTraslado) {
                            if ($arMovimientoDetalleTraslado->getOperacionInventario() != 0) {
                                $em->getRepository('BrasaInventarioBundle:InvLote')->MoverExistencia($arMovimientoDetalleTraslado->getCodigoItemFk(), $arMovimientoDetalleTraslado->getCodigoBodegaFk(), $arMovimientoDetalleTraslado->getLoteFk(), $arMovimientoDetalleTraslado->getOperacionInventario()*-1, $arMovimientoDetalleTraslado->getCantidad(), $arMovimientoDetalleTraslado->getFechaVencimiento());
                                $arMovimientoDetalleEliminar = $em->getRepository('BrasaInventarioBundle:InvMovimientoDetalle')->find($arMovimientoDetalleTraslado->getCodigoDetalleMovimientoPk());
                                $em->remove($arMovimientoDetalleEliminar);
                                $em->flush();
                            } else {
                                $arMovimientoDetalleAct = $em->getRepository('BrasaInventarioBundle:InvMovimientoDetalle')->find($arMovimientoDetalleTraslado->getCodigoDetalleMovimientoPk());
                                $arMovimientoDetalleAct->setEstadoAnulado(1);
                                $arMovimientoDetalleAct->setCantidad(0);
                                $arMovimientoDetalleAct->setPrecio(0);
                                $arMovimientoDetalleAct->setPorcentajeDescuento(0);
                                $arMovimientoDetalleAct->setCantidadOperada(0);
                                $arMovimientoDetalleAct->setSubTotal(0);
                                $arMovimientoDetalleAct->setTotalBruto(0);
                                $arMovimientoDetalleAct->setValorTotalDescuento(0);
                                $arMovimientoDetalleAct->setValorTotalIva(0);
                                $arMovimientoDetalleAct->setTotal(0);
                                $arMovimientoDetalleAct->setCosto(0);
                                $arMovimientoDetalleAct->setCostoPromedio(0);
                                $em->persist($arMovimientoDetalleAct);
                                $em->flush();                                
                            }
                        }
                    }                    
                    
                    $arMovimiento->setEstadoAnulado(1);
                    $arMovimiento->setVrSubTotal(0);
                    $arMovimiento->setVrTotal(0);
                    $arMovimiento->setVrBruto(0);
                    $arMovimiento->setVrNeto(0);
                    $arMovimiento->setVrOtrasRetenciones(0);
                    $arMovimiento->setVrRetencionFuente(0);
                    $arMovimiento->setVrRetencionIvaVentas(0);
                    $arMovimiento->setVrRetencionCREE(0);
                    $arMovimiento->setVrDescuento(0);
                    $arMovimiento->setVrIva(0);
                    $em->persist($arMovimiento);
                    $em->flush();
                    $em->getRepository('BrasaInventarioBundle:InvMovimiento')->Liquidar($codigoMovimiento);
                    return "";
                }
                else
                    return $strValidacion;
            }
            else
                return "No se puede desautorizar el movimiento, verifique que no este anulado y que este autorizado, impresion";

        } catch (Exception $e) {
            return $e;
        }
    }

    /**
     * Imprime un movimiento
     * @param integer $codigoMovimiento codigo del movimiento que se va a procesar.
     * @return boolean si se imprime o no el movimiento
     * */
    public function Imprimir($codigoMovimiento) {
        $em = $this->getEntityManager();
        $arMovimiento = new \Brasa\InventarioBundle\Entity\InvMovimiento();
        $arMovimiento = $em->getRepository('BrasaInventarioBundle:InvMovimiento')->find($codigoMovimiento);
        if($arMovimiento->getEstadoImpreso() == 0) {
            if ($arMovimiento->getEstadoAutorizado() == 1 && $arMovimiento->getEstadoAnulado() == 0) {
                if($arMovimiento->getNumeroMovimiento() == 0 && $arMovimiento->getDocumentoRel()->getAsignarConsecutivoImpresion() == 1 && $arMovimiento->getEstadoImpreso() == 0) {
                    $arMovimiento->setNumeroMovimiento ($em->getRepository('BrasaInventarioBundle:InvMovimiento')->DevConsecutivo($arMovimiento->getCodigoDocumentoFk()));
                    $arMovimiento->setFecha(date_create(date('Y-m-d H:i:s')));
                }
                //Fecha de vencimiento de los documentos de facturacion segun el plazo del cliente
                if($arMovimiento->getCodigoDocumentoTipoFk() == 4) {
                    $intPlazoPago = $arMovimiento->getTerceroRel()->getPlazoPagoCliente();
                    $dateFechaVencimiento = strtotime ( "+$intPlazoPago day" , strtotime ( date('Y-m-d') ) ) ;
                    $dateFechaVencimiento = date ( 'Y-m-d' , $dateFechaVencimiento );
                    $arMovimiento->setFecha1(date_create($dateFechaVencimiento));
                }

                $arMovimiento->setEstadoImpreso(1);
                $em->persist($arMovimiento);
                $em->flush();

                if ($arMovimiento->getDocumentoRel()->getGeneraCartera() == 1)
                    $em->getRepository('BrasaCarteraBundle:CarCuentaCobrar')->Aplicar($codigoMovimiento);
                if ($arMovimiento->getDocumentoRel()->getGeneraTesoreria() == 1)
                    $em->getRepository('BrasaTesoreriaBundle:TesCuentaPagar')->Aplicar($codigoMovimiento);

                return "";
            }
            else
                return "El documento debe estar autorizado y no puede estar anulado";
        }
        else
            return "";
    }

    public function GenerarCuenta($codigoMovimiento) {
        $em = $this->getEntityManager();
        $arMovimiento = new \Brasa\InventarioBundle\Entity\InvMovimiento();
        $arMovimiento = $em->getRepository('BrasaInventarioBundle:InvMovimiento')->find($codigoMovimiento);
        if($arMovimiento->getEstadoImpreso() == 1) {
            if ($arMovimiento->getDocumentoRel()->getGeneraCartera() == 1)
                $em->getRepository('BrasaCarteraBundle:CarCuentaCobrar')->Aplicar($codigoMovimiento);
            if ($arMovimiento->getDocumentoRel()->getGeneraTesoreria() == 1)
                $em->getRepository('BrasaTesoreriaBundle:TesCuentaPagar')->Aplicar($codigoMovimiento);
        }
    }

    /**
     * Liquida los todales del movimiento y los detalles
     * @param integer $codigoMovimiento codigo del movimiento que se va a procesar.
     * */
    public function Liquidar($codigoMovimiento) {
        $em = $this->getEntityManager();
        //Encabezados
        $douGranSubTotal = 0;
        $douGranTotalIva = 0;
        $douGranTotalDescuento = 0;
        $douGranTotal = 0;
        $douGranTotalBruto = 0;
        $douGranTotalNeto = 0;
        $douGranTotalRetencionFuente = 0;
        $douGranTotalRetencionCREE = 0;
        $douGranTotalRetencionIvaVentas = 0;


        $arConfiguraciones = new \Brasa\GeneralBundle\Entity\GenConfiguracion();
        $arConfiguraciones = $em->getRepository('BrasaGeneralBundle:GenConfiguracion')->find(1);
        $arMovimiento = new \Brasa\InventarioBundle\Entity\InvMovimiento();
        $arMovimiento = $em->getRepository('BrasaInventarioBundle:InvMovimiento')->find($codigoMovimiento);
        $arMovimientosDetalle = new \Brasa\InventarioBundle\Entity\InvMovimientoDetalle();
        $arMovimientosDetalle = $em->getRepository('BrasaInventarioBundle:InvMovimientoDetalle')->findBy(array('codigoMovimientoFk' => $codigoMovimiento));
        foreach ($arMovimientosDetalle as $arMovimientoDetalle) {
            //Detalles
            $douSubTotal = 0;
            $douTotalBruto = 0;
            $douTotalIva = 0;
            $douTotalDescuento = 0;
            $douTotal = 0;
            $douSubTotal = $arMovimientoDetalle->getCantidad() * $arMovimientoDetalle->getVrPrecio();
            if ($arMovimientoDetalle->getPorcentajeDescuento() > 0)
                $douTotalDescuento = $douSubTotal * ($arMovimientoDetalle->getPorcentajeDescuento() / 100);
            $douTotalBruto = $douSubTotal - $douTotalDescuento;
            $douTotalIva = $douTotalBruto * ($arMovimientoDetalle->getPorcentajeIva() / 100);
            $douTotal = $douTotalBruto + $douTotalIva;

            $douGranSubTotal = $douGranSubTotal + $douSubTotal;
            $douGranTotalIva = $douGranTotalIva + $douTotalIva;
            $douGranTotalDescuento = $douGranTotalDescuento + $douTotalDescuento;

            $arMovimientoDetalleAct = new \Brasa\InventarioBundle\Entity\InvMovimientoDetalle();
            $arMovimientoDetalleAct = $em->getRepository('BrasaInventarioBundle:InvMovimientoDetalle')->find($arMovimientoDetalle->getCodigoDetalleMovimientoPk());
            $arMovimientoDetalleAct->setVrSubTotal($douSubTotal);
            $arMovimientoDetalleAct->setVrDescuento($douTotalDescuento);
            $arMovimientoDetalleAct->setVrBruto($douTotalBruto);
            $arMovimientoDetalleAct->setVrIva($douTotalIva);
            $arMovimientoDetalleAct->setVrTotal($douTotal);
            $em->persist($arMovimientoDetalleAct);
            $em->flush();
        }
        $douGranTotalBruto = $douGranSubTotal - $douGranTotalDescuento;
        //Calcular la retenciones en compras y ordenes de compras
        if ($arMovimiento->getDocumentoRel()->getCodigoDocumentoTipoFk() == 1 || $arMovimiento->getDocumentoRel()->getCodigoDocumentoTipoFk() == 5) {
            //Retenciones automaticas
            if ($arMovimiento->getTerceroRel()->getAutoretenedor() == 0 && $arMovimiento->getTerceroRel()->getClasificacionTributariaRel()->getRetencionFuente() == 1) {
                //Retencion en la fuente
                if ($douGranTotalBruto >= $arConfiguraciones->getBaseRetencionFuente()) {
                    $douGranTotalRetencionFuente = ($douGranTotalBruto * $arConfiguraciones->getPorcentajeRetencionFuente()) / 100;
                }
            }
        }

        //Calcular la retenciones en Ventas
        if ($arMovimiento->getDocumentoRel()->getCodigoDocumentoTipoFk() == 4) {
            //Retencion en la fuente
            if ($arMovimiento->getTerceroRel()->getRetencionFuenteVentas() == 1) {
                if ($douGranTotalBruto >= $arConfiguraciones->getBaseRetencionFuente() || $arMovimiento->getTerceroRel()->getRetencionFuenteVentasSinBase() == 1) {
                    $douGranTotalRetencionFuente = ($douGranTotalBruto * $arConfiguraciones->getPorcentajeRetencionFuente()) / 100;
                }
            }

            //Liquidar retencion de iva para las ventas, solo los grandes contribuyentes y entidades del estado nos retienen 50% iva
            if ($arMovimiento->getTerceroRel()->getClasificacionTributariaRel()->getRetencionIvaVentas() == 1) {
                //Validacion acordada con Luz Dary de que las devoluciones tambien validen la base
                if ($douGranTotalIva >= $arConfiguraciones->getBaseRetencionIvaVentas()) {
                    $douGranTotalRetencionIvaVentas = ($douGranTotalIva * $arConfiguraciones->getPorcentajeRetencionIvaVentas()) / 100;
                }
            }

            //Retencion de cree
            if($arMovimiento->getTerceroRel()->getClasificacionTributariaRel()->getRetencionCREE() == 1 && $douGranTotalBruto >= $arConfiguraciones->getBaseRetencionCREE()) {
                $douGranTotalRetencionCREE = ($douGranTotalBruto * $arConfiguraciones->getPorcentajeRetencionCREE()) / 100;
            }
        }

        //Calcular la retencion en la fuente de ventas para clientes que retengan
        //Si el cliente es retenedor y el documento es una venta (Factura o devolucion)
        if ($arMovimiento->getTerceroRel()->getRetencionFuenteVentas() == 1 && $arMovimiento->getDocumentoRel()->getCodigoDocumentoTipoFk() == 4) {
            if ($douGranTotalBruto >= $arConfiguraciones->getBaseRetencionFuente()) {
                $douGranTotalRetencionFuente = ($douGranTotalBruto * $arConfiguraciones->getPorcentajeRetencionFuente()) / 100;
            }
        }

        $douGranTotalNeto =  $douGranTotalBruto + $douGranTotalIva;
        $douGranTotal = $douGranTotalNeto - ($douGranTotalRetencionFuente + $douGranTotalRetencionCREE + $douGranTotalRetencionIvaVentas);

        $arMovimientoAct = new \Brasa\InventarioBundle\Entity\InvMovimiento();
        $arMovimientoAct = $em->getRepository('BrasaInventarioBundle:InvMovimiento')->find($codigoMovimiento);
        $arMovimientoAct->setVrSubTotal($douGranSubTotal);
        $arMovimientoAct->setVrIva($douGranTotalIva);
        $arMovimientoAct->setVrDescuento($douGranTotalDescuento);
        $arMovimientoAct->setVrBruto($douGranTotalBruto);
        $arMovimientoAct->setVrNeto($douGranTotalNeto);
        $arMovimientoAct->setVrTotal($douGranTotal);
        $arMovimientoAct->setVrRetencionFuente($douGranTotalRetencionFuente);
        $arMovimientoAct->setVrRetencionCREE($douGranTotalRetencionCREE);
        $arMovimientoAct->setVrRetencionIvaVentas($douGranTotalRetencionIvaVentas);
        $em->persist($arMovimientoAct);
        $em->flush();
    }

    public function Reliquidar($codigoMovimiento) {
        $em = $this->getEntityManager();
        $arMovimiento = new \Brasa\InventarioBundle\Entity\InvMovimiento();
        $arMovimiento = $em->getRepository('BrasaInventarioBundle:InvMovimiento')->find($codigoMovimiento);
        $em->getRepository('BrasaInventarioBundle:InvMovimiento')->Liquidar($codigoMovimiento);
    }

    public function LiquidarRetenciones($codigoMovimiento) {
        $em = $this->getEntityManager();
        $douTotalDescuentosFinancieros = 0;
        $arMovimientosDescuentosFinancieros = new \Brasa\InventarioBundle\Entity\InvMovimientoDescuentoFinanciero();
        $arMovimientosDescuentosFinancieros = $em->getRepository('BrasaInventarioBundle:InvMovimientoDescuentoFinanciero')->findBy(array('codigoMovimientoFk' => $codigoMovimiento));
        foreach ($arMovimientosDescuentosFinancieros as $arMovimientosDescuentosFinancieros) {
            $douTotalDescuentosFinancieros = $douTotalDescuentosFinancieros + $arMovimientosDescuentosFinancieros->getValorTotal();
        }
        $arMovimiento = new \Brasa\InventarioBundle\Entity\InvMovimiento();
        $arMovimiento = $em->getRepository('BrasaInventarioBundle:InvMovimiento')->find($codigoMovimiento);
        $arMovimiento->setValorDescuentoFinanciero($douTotalDescuentosFinancieros);
        $douGranTotal = $arMovimiento->getTotalNeto() - ($douTotalDescuentosFinancieros + $arMovimiento->getValorRetencionFuente() + $arMovimiento->getValorRetencionCREE() + $arMovimiento->getValorRetencionIvaVentas());
        $arMovimiento->setTotal($douGranTotal);

        $em->persist($arMovimiento);
        $em->flush();
    }

    /**
     * Devuelve los movimientos de un filtro
     * @param integer $codigoMovimiento codigo del movimiento que se va a procesar.
     * */
    public function DevMovimientosFiltro($codigoDocumento, $codigoMovimiento, $numeroMovimiento, $codigoTercero, $ChkFecha, $strFechaDesde, $strFechaHasta, $boolAutorizado = 0, $boolImpreso = 0) {
        $em = $this->getEntityManager();
        $query = $em->createQueryBuilder()
                ->select('m')
                ->from('BrasaInventarioBundle:InvMovimiento', 'm')
                ->where('m.codigoDocumentoFk = :codigoDocumento')
                ->setParameter('codigoDocumento', $codigoDocumento);

        if ($codigoMovimiento != Null && $codigoMovimiento != "")
            $query->andWhere('m.codigoMovimientoPk = ' . $codigoMovimiento);

        if ($numeroMovimiento != Null && $numeroMovimiento != "")
            $query->andWhere('m.numeroMovimiento = ' . $numeroMovimiento);

        if ($codigoTercero != Null && $codigoTercero != "")
            $query->andWhere('m.codigoTerceroFk = ' . $codigoTercero);

        if ($boolAutorizado == 1)
            $query->andWhere('m.estadoAutorizado = 1');

        if ($boolAutorizado == 2)
            $query->andWhere('m.estadoAutorizado = 0');

        if ($boolImpreso == 1)
            $query->andWhere('m.estadoImpreso = 1');

        if ($boolImpreso == 2)
            $query->andWhere('m.estadoImpreso = 0');

        if ($ChkFecha != Null) {
            if ($strFechaDesde != "" && $strFechaDesde != NULL) {
                if ($strFechaHasta != "" && $strFechaHasta != NULL) {
                    $query->andWhere("m.fecha >= '" . $strFechaDesde . " 00:00:00' AND m.fecha <= '" . $strFechaHasta . " 23:59:59'");
                }
            }
        }

        $objQuery = $query->getQuery();
        $arMovimientos = new \Brasa\InventarioBundle\Entity\InvMovimientoDetalle();
        $arMovimientos = $objQuery->getResult();

        return $arMovimientos;
    }

    /**
     * Devuelve los movimientos facturacion resumido por año y mes
     * */
    public function DevMovimientosFacturacionResumidoAnnioMes() {
        $em = $this->getEntityManager();
        $strSql = "SELECT DATE_FORMAT(fecha, '%Y') AS FechaAnnio, DATE_FORMAT(fecha, '%M') AS FechaMes, SUM(subtotal) as subTotal
                   FROM movimientos
                   GROUP BY DATE_FORMAT(fecha, '%Y'), DATE_FORMAT(fecha, '%M')";

        $objCon = $em->getConnection();
        $arMovimientos = $objCon->executeQuery($strSql);
        $arMovimientos = $arMovimientos->fetchAll();
        return $arMovimientos;
    }

    /**
     * Devuelve el estado autorizado de un movimiento
     * @param integer $codigoMovimientoPk El codigo del movimiento a consultar
     * @return boolean 1 / 0 => autorizado / no autorizado
     */
    public function DevEstadoMovimiento($codigoMovimientoPk) {
        $em = $this->getEntityManager();
        $arMovimiento = new \Brasa\InventarioBundle\Entity\InvMovimiento();
        $arMovimiento = $em->getRepository('BrasaInventarioBundle:InvMovimiento')->find($codigoMovimientoPk);

        return (int) $arMovimiento->getEstadoAutorizado();
    }

    public function DevMovimientosFacturasPos() {
        $em = $this->getEntityManager();
        $query = $em->createQueryBuilder()
                ->select('m')
                ->from('BrasaGeneralBundle:Movimientos', 'm')
                ->leftJoin('m.documentoRel', 'doc')
                ->where('doc.facturaPOS = 1 AND m.estadoAnulado = 0 AND m.estadoImpreso = 1 AND m.cierreCaja = 0');


        $objQuery = $query->getQuery();
        $arMovimientos = new \Brasa\InventarioBundle\Entity\InvMovimiento();
        $arMovimientos = $objQuery->getResult();
        return $arMovimientos;
    }

    public function DevConsecutivo ($intCodigoDocumento) {
        $em = $this->getEntityManager();
        $arDocumento = new \Brasa\InventarioBundle\Entity\InvDocumento();
        $arDocumento = $em->getRepository('BrasaInventarioBundle:InvDocumento')->find($intCodigoDocumento);
        $intNroDocumento = $arDocumento->getConsecutivo();
        $arDocumento->setConsecutivo($intNroDocumento + 1);
        $em->persist($arDocumento);
        $em->flush();
        return $intNroDocumento;
    }

    /**
     * Devuelve un array con el resumen (suma) subtotal de movimientos
     * @param type $dateFechaDesde
     * @param type $dateFechaHasta
     * @param type $intCodigoDocumento
     * @param type $intCodigoTipoDocumento
     * @return type
     */
    public function DevMovimientosResumenCosto($dateFechaDesde = "", $dateFechaHasta, $intCodigoDocumento = "", $intCodigoTipoDocumento = "") {
        $em = $this->getEntityManager();
        $query = $em->createQueryBuilder()
                ->select('SUM(m.valorTotalCosto * doc.operacionComercial)')
                ->from('BrasaInventarioBundle:InvMovimiento', 'm')
                ->leftJoin("m.documentoRel", "doc")
                ->orderBy("m.fecha", 'ASC');

        if ($dateFechaDesde != Null && $dateFechaDesde != "")
            $query->andWhere("m.fecha >= '" . $dateFechaDesde . " 00:00:00'");

        if ($dateFechaHasta != Null && $dateFechaHasta != "")
            $query->andWhere("m.fecha <= '" . $dateFechaHasta . " 23:59:59'");

        if ($intCodigoDocumento != "")
            $query->andWhere("m.codigoDocumentoFk = " . $intCodigoDocumento);

        $objQuery = $query->getQuery();
        return $objQuery->getResult();
    }
    
    public function eliminar($arrSeleccionados) {
        $em = $this->getEntityManager();
        $respuesta = false;                        
        if(count($arrSeleccionados) > 0) {
            foreach ($arrSeleccionados AS $codigo) {
                if($em->getRepository('BrasaInventarioBundle:InvMovimientoDetalle')->numeroRegistros($codigo) <= 0) {
                    $arMovimiento = $em->getRepository('BrasaInventarioBundle:InvMovimiento')->find($codigo);
                    if ($arMovimiento->getEstadoAutorizado() == 1){
                        $respuesta = true;                        
                    } else {
                        if($arMovimiento->getEstadoAutorizado() == 0 && $arMovimiento->getNumero() == 0) {
                            $em->remove($arMovimiento);
                            $respuesta = false;
                        }
                    }
                }
            }
            $em->flush();
        }
        return $respuesta;
    }
}