<?php

namespace Brasa\RecursoHumanoBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RhuVacacionRepository extends EntityRepository {
    
    public function dias($codigoEmpleado, $fechaDesde, $fechaHasta) {
        $em = $this->getEntityManager();
        $arVacaciones = new \Brasa\RecursoHumanoBundle\Entity\RhuVacacion();
        $dql   = "SELECT v FROM BrasaRecursoHumanoBundle:RhuVacacion v "
                . "WHERE v.estadoDisfrutadas = 1 AND v.codigoEmpleadoFk = " . $codigoEmpleado
                . " AND v.fechaDesde <= '" . $fechaHasta->format('Y-m-d') . "' "
                . " AND v.fechaHasta >= '" . $fechaDesde->format('Y-m-d') . "' ";
        $query = $em->createQuery($dql);
        $arVacaciones = $query->getResult();
        $intDiasDevolver = 0;
        foreach ($arVacaciones as $arVacacion) {
            $dateFechaDesde =  "";
            $dateFechaHasta =  "";
            
            if($arVacacion->getFechaDesde() <  $fechaDesde == true) {
                $dateFechaDesde = $fechaDesde;
            } else {
                $dateFechaDesde = $arVacacion->getFechaDesde();
            }

            if($arVacacion->getFechaHasta() >  $fechaHasta == true) {
                $dateFechaHasta = $fechaHasta;
            } else {
                $dateFechaHasta = $arVacacion->getFechaHasta();
            }
            if($dateFechaDesde != "" && $dateFechaHasta != "") {
                $intDias = $dateFechaDesde->diff($dateFechaHasta);
                $intDias = $intDias->format('%a');
                $intDiasDevolver += $intDias + 1;
            }
        }
        return $intDiasDevolver;
    }
    
    public function listaVacacionesDQL($strCodigoCentroCosto = "", $strIdentificacion = "") {        
        $em = $this->getEntityManager();
        $dql   = "SELECT v, e FROM BrasaRecursoHumanoBundle:RhuVacacion v JOIN v.empleadoRel e WHERE v.codigoVacacionPk <> 0";
        
        if($strCodigoCentroCosto != "") {
            $dql .= " AND v.codigoCentroCostoFk = " . $strCodigoCentroCosto;
        }   
        if($strIdentificacion != "" ) {
            $dql .= " AND e.numeroIdentificacion LIKE '%" . $strIdentificacion . "%'";
        }
        return $dql;
    }

    public function liquidar($codigoVacacion) {        
        $em = $this->getEntityManager();
        $arConfiguracion = $em->getRepository('BrasaRecursoHumanoBundle:RhuConfiguracion')->configuracionDatoCodigo(1);
        $arVacacion = new \Brasa\RecursoHumanoBundle\Entity\RhuVacacion();
        $arVacacion = $em->getRepository('BrasaRecursoHumanoBundle:RhuVacacion')->find($codigoVacacion);         
        $intDias = $em->getRepository('BrasaRecursoHumanoBundle:RhuLiquidacion')->diasPrestaciones($arVacacion->getFechaDesde(), $arVacacion->getFechaHasta());
        //$intDias = $arVacacion->getFechaDesde()->diff($arVacacion->getFechaHasta());
        //$intDias = $intDias->format('%a');
        //$intDias = $intDias + 1;
        $floSalario = $arVacacion->getEmpleadoRel()->getVrSalario();
        $floIbc = $floSalario / 30 * $intDias;
        $arVacacion->setVrIbc($floIbc);
        $arVacacion->setDiasVacaciones($intDias);
        $douSalud = ($floIbc * 4) /100;
        $arVacacion->setVrSalud($douSalud);
        if ($floSalario >= ($arConfiguracion->getVrSalario() * 4)){
            $douPorcentaje = $arConfiguracion->getPorcentajePensionExtra();
            $douPension = ($floIbc * $douPorcentaje) /100;
        }
        else {
            $douPension = ($floIbc * 4) /100;
        }
        $arVacacion->setVrPension($douPension);                                   
        
        $floDeducciones = 0;
        $arVacacionDeducciones = new \Brasa\RecursoHumanoBundle\Entity\RhuVacacionCredito();
        $arVacacionDeducciones = $em->getRepository('BrasaRecursoHumanoBundle:RhuVacacionCredito')->FindBy(array('codigoVacacionFk' => $codigoVacacion));        
        foreach ($arVacacionDeducciones as $arVacacionDeduccion) {
            $floDeducciones += $arVacacionDeduccion->getVrDeduccion();
        }
        $arVacacion->setVrDeduccion($floDeducciones);
        $floTotal = $arVacacion->getVrIbc() -  $arVacacion->getVrPension() - $arVacacion->getVrSalud() - $floDeducciones;
        $arVacacion->setVrVacacion($floTotal);
        $em->flush();
        return true;
    }     
    
}

