<?php

namespace Brasa\InventarioBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * LotesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class InvLoteRepository extends EntityRepository {

    /**
     * Mueve el intentario de lotes en existencia
     * @param integer $intItem Codigo del item a mover
     * @param integer $intBodega Codigo de la bodega
     * @param string $strLote Lote para la afectacion de inventario
     * @param integer $intOperacion Operacion de entrada o salida 1 o -1
     * @param integer $intCantidad Cantidad en que se afectara el inventario de ese lote 
     * @param string $strFechaVencimiento Fecha de vencimiento para el caso que se deba crear por defecto nulo
     * */
    public function MoverExistencia($intItem, $intBodega, $strLote, $intOperacion, $intCantidad, $strFechaVencimiento = NULL) {
        $em = $this->getEntityManager();
        $arLote = new \Brasa\InventarioBundle\Entity\InvLote();
        $arLote = $em->getRepository('BrasaInventarioBundle:InvLote')->findBy(array('codigoItemFk' => $intItem, 'codigoBodegaFk' => $intBodega, 'loteFk' => $strLote));
        //Si no existe el lote se crea
        if (count($arLote) <= 0)
            $em->getRepository('BrasaInventarioBundle:InvLote')->CrearLote($intItem, $intBodega, $strLote, $strFechaVencimiento);

        $arLote = $em->getRepository('BrasaInventarioBundle:InvLote')->find(array('codigoItemFk' => $intItem, 'codigoBodegaFk' => $intBodega, 'loteFk' => $strLote));
        $arLote->setExistencia($arLote->getExistencia() + ($intCantidad * $intOperacion));
        $em->persist($arLote);
        $em->flush();
        $em->getRepository('BrasaInventarioBundle:InvItem')->MoverExistencia($arLote->getCodigoItemFk(), $intCantidad * $intOperacion);
    }

    /**
     * Mueve el intentario de lotes en disponible
     * @param integer $intItem Codigo del item a mover
     * @param integer $intBodega Codigo de la bodega
     * @param string $strLote Lote para la afectacion de inventario
     * @param integer $intOperacion Operacion de entrada o salida 1 o -1
     * @param integer $intCantidad Cantidad en que se afectara el inventario de ese lote 
     * @param string $strFechaVencimiento Fecha de vencimiento para el caso que se deba crear por defecto nulo
     * */
    public function MoverRemision($intItem, $intBodega, $strLote, $intOperacion, $intCantidad, $strFechaVencimiento = NULL) {
        $em = $this->getEntityManager();
        $arLote = new \Brasa\InventarioBundle\Entity\InvLote();
        $arLote = $em->getRepository('BrasaInventarioBundle:InvLote')->findBy(array('codigoItemFk' => $intItem, 'codigoBodegaFk' => $intBodega, 'loteFk' => $strLote));
        //Si no existe el lote se crea
        if (count($arLote) <= 0)
            $em->getRepository('BrasaInventarioBundle:InvLote')->CrearLote($intItem, $intBodega, $strLote, $strFechaVencimiento);

        $arLote = $em->getRepository('BrasaInventarioBundle:InvLote')->find(array('codigoItemFk' => $intItem, 'codigoBodegaFk' => $intBodega, 'loteFk' => $strLote));
        $arLote->setCantidadRemisionada($arLote->getCantidadRemisionada() + ($intCantidad * $intOperacion));
        $em->persist($arLote);
        $em->flush();
        $em->getRepository('BrasaInventarioBundle:InvItem')->MoverRemision($arLote->getCodigoItemFk(), $intCantidad * $intOperacion);
    }    

    /**
     * Funcion para crear los lotes
     * @param integer $intItem Codigo del item a mover
     * @param integer $intBodega Codigo de la bodega
     * @param string $strLote Lote para la afectacion de inventario          
     * @param string $strFechaVencimiento Fecha de vencimiento para el caso que se deba crear por defecto nulo
     */
    public function CrearLote($intItem, $intBodega, $strLote, $strFechaVencimiento) {
        $em = $this->getEntityManager();
        $arItem = new \Brasa\InventarioBundle\Entity\InvItem();
        $arItem = $em->getRepository('BrasaInventarioBundle:InvItem')->find($intItem);
        $arBodega = new \Brasa\InventarioBundle\Entity\InvBodega();
        $arBodega = $em->getRepository('BrasaInventarioBundle:InvBodega')->find($intBodega);        
        $arLoteNuevo = new \Brasa\InventarioBundle\Entity\InvLote();
        $arLoteNuevo->setItemRel($arItem);
        $arLoteNuevo->setCodigoItemFk($arItem->getCodigoItemPk());
        $arLoteNuevo->setBodegaRel($arBodega);
        $arLoteNuevo->setCodigoBodegaFk($intBodega);
        $arLoteNuevo->setLoteFk($strLote);
        $arLoteNuevo->setFechaVencimiento($strFechaVencimiento);
        $em->persist($arLoteNuevo);
        $em->flush();
    }

    /**
     * Valida si hay existencias suficientes para sacar del lote
     * @param integer $intItem Codigo del item a mover
     * @param integer $intBodega Codigo de la bodega
     * @param string $strLote Lote para la afectacion de inventario     
     * @param integer $intCantidad Cantidad en que se afectara el inventario de ese lote 
     * @return boolean 
     */
    public function ValidarExistencia($intItem, $intBodega, $strLote, $intCantidad) {
        $em = $this->getEntityManager();
        $arLote = new \Brasa\InventarioBundle\Entity\InvLote();        
        $arLote = $em->getRepository('BrasaInventarioBundle:InvLote')->find(array('codigoItemFk' => $intItem, 'codigoBodegaFk' => $intBodega, 'loteFk' => $strLote));
        if(count($arLote) > 0) {
            if($arLote->getItemRel()->getPermitirInventarioNegativo() == 1)
                return true;        
            if (($arLote->getExistencia() - $intCantidad) < 0)
                return false;            
            else
                return true;
        }
        else
            return false;                    
    }

    /**
     * Valida si hay existencias suficientes para sacar del lote
     * @param integer $intItem Codigo del item a mover
     * @param integer $intBodega Codigo de la bodega
     * @param string $strLote Lote para la afectacion de inventario     
     * @param integer $intCantidad Cantidad en que se afectara el inventario de ese lote 
     * @return boolean 
     */
    public function ValidarDisponible($intItem, $intBodega, $strLote, $intCantidad) {
        $em = $this->getEntityManager();
        $arLote = new \Brasa\InventarioBundle\Entity\InvLote();        
        $arLote = $em->getRepository('BrasaInventarioBundle:InvLote')->find(array('codigoItemFk' => $intItem, 'codigoBodegaFk' => $intBodega, 'loteFk' => $strLote));
        if(count($arLote) > 0) {
            if($arLote->getItemRel()->getPermitirInventarioNegativo() == 1)
                return true;        
            if (($arLote->getCantidadDisponible() - $intCantidad) < 0)
                return false;            
            else
                return true;
        }
        else
            return false;                    
    }    
    
    /*
     * Establece los lotes a cero para regenerar kardex
     */

    public function ReiniciarValoresLotes() {
        $em = $this->getEntityManager();
        $dql = "UPDATE BrasaInventarioBundle:InvLote l SET l.existencia = 0";
        $query = $em->createQuery($dql);
        $arLotes = $query->getResult();
        return $arLotes;
    }

    /**
     * Devuelve los lotes con existencias mayores a cero
     * @param integer $codigoItem Codigo del item para extraer los lotes
     */
    public function DevLotesExistenciaTodos() {
        $em = $this->getEntityManager();
        $query = $em->createQueryBuilder()
                ->select('lotes')
                ->from('BrasaInventarioBundle:InvLote', 'lotes')
                ->where('lotes.existencia > 0')                
                ->getQuery();
        $arResultado = $query->getResult();
        return $arResultado;
    }    
    
    /**
     * Devuelve los lotes con existencias mayores a cero
     * @param integer $codigoItem Codigo del item para extraer los lotes
     */
    public function DevLotesExistencia($codigoItem) {
        $em = $this->getEntityManager();
        $query = $em->createQueryBuilder()
                ->select('lotes.existencia, 
                          lotes.loteFk, 
                          lotes.fechaVencimiento, 
                          lotes.codigoBodegaFk, 
                          lotes.cantidadRemisionada, 
                          lotes.cantidadReservada, 
                          lotes.cantidadDisponible,
                          bodega.nombre AS nombreBodega')
                ->from('BrasaInventarioBundle:InvLote', 'lotes')
                ->leftJoin('lotes.bodegaRel', 'bodega')
                ->where('lotes.existencia > 0 AND lotes.codigoItemFk = :item')
                ->setParameter('item', $codigoItem)
                ->getQuery();
        $arResultado = $query->getResult();
        return $arResultado;
    }

     /**
     * Devuelve los lotes con existencias filtro
     * @param integer $codigoItem Codigo del item para extraer los lotes
     */
    public function DevLotesExistenciaFiltro($intCodigoItem = null, $intBodega = null, $strLote = null) {
        $em = $this->getEntityManager();
        $query = $em->createQueryBuilder()
                ->select('lotes.existencia, 
                          lotes.cantidadRemisionada,
                          lotes.cantidadReservada,
                          lotes.cantidadDisponible,
                          lotes.loteFk, 
                          lotes.fechaVencimiento, 
                          lotes.codigoBodegaFk, 
                          lotes.codigoItemFk, 
                          item.descripcion, 
                          bodega.nombre AS nombreBodega')
                ->from('BrasaInventarioBundle:InvLote', 'lotes')
                ->leftJoin('lotes.itemRel', 'item')
                ->leftJoin('lotes.bodegaRel', 'bodega')
                ->where('lotes.existencia > 0')
                ->orderBy('lotes.codigoItemFk');
                
        
        if ($intCodigoItem != Null && $intCodigoItem != "")
            $query->andWhere('lotes.codigoItemFk = ' . $intCodigoItem);
        
        if ($intBodega != Null && $intBodega != "")
            $query->andWhere('lotes.codigoBodegaFk = ' . $intBodega);  

        if ($strLote != Null && $strLote != "")
            $query->andWhere("lotes.loteFk like '%" . $strLote . "%'");        
        
        $query = $query->getQuery();
        $arLotes = new \Brasa\InventarioBundle\Entity\InvLote();
        $arLotes = $query->getResult();
        return $arLotes;
    }
    
    /**
     * Establece las existencias de los items despues de una regeneracion     
     */
    public function EstablecerExistenciaItems() {
        $em = $this->getEntityManager();
        $query = $em->createQueryBuilder()
                ->select('lot.codigoItemFk, SUM(lot.existencia) AS existencia')
                ->from('BrasaInventarioBundle:InvLote', 'lot')
                ->where('lot.existencia > 0')
                ->groupBy('lot.codigoItemFk')
                ->getQuery();
        $arLotes = new \Brasa\InventarioBundle\Entity\InvLote();
        $arLotes = $query->getResult();
        $arItem = new \Brasa\InventarioBundle\Entity\InvItem();
        foreach ($arLotes AS $arLotes) {
            $arItem = $em->getRepository('BrasaInventarioBundle:InvItem')->find($arLotes['codigoItemFk']);
            $arItem->setCantidadExistencia($arLotes['existencia']);
            $em->persist($arItem);
            $em->flush();
        }
    }
    
    /**
     * Establecer los disponibles segun la formula
     * Disponible = existencia-(remisionada-reserva)
     */
    public function EstablecerDisponiblesLotesItems () {
        $em = $this->getEntityManager();
        $strDql = "UPDATE BrasaInventarioBundle:InvLote l SET l.cantidadDisponible = 0";
        $objQuery = $em->createQuery($strDql);
        $arResultado = $objQuery->getResult();

        $strDql = "UPDATE BrasaInventarioBundle:InvItem l SET l.cantidadDisponible = 0";
        $objQuery = $em->createQuery($strDql);
        $arResultado = $objQuery->getResult();        
        
        $strDql = "UPDATE BrasaInventarioBundle:InvLote l SET l.cantidadDisponible = l.existencia -(l.cantidadRemisionada + l.cantidadReservada)";
        $objQuery = $em->createQuery($strDql);
        $arResultado = $objQuery->getResult();
        
        $arLotes = new \Brasa\InventarioBundle\Entity\InvLote();
        $objQuery = $em->createQueryBuilder()
            ->select('lot.codigoItemFk, SUM(lot.cantidadRemisionada) AS cantidadRemisionada, SUM(lot.cantidadReservada) AS cantidadReservada, SUM(lot.existencia) AS existencia')
            ->from('BrasaInventarioBundle:InvLote', 'lot')
            ->where('lot.existencia > 0')
            ->groupBy('lot.codigoItemFk')
            ->getQuery();
        
        $arLotes = $objQuery->getResult();
        $arItem = new \Brasa\InventarioBundle\Entity\InvItem();
        foreach ($arLotes AS $arLotes) {
            $arItem = $em->getRepository('BrasaInventarioBundle:InvItem')->find($arLotes['codigoItemFk']);            
            $arItem->setCantidadRemisionada($arLotes['cantidadRemisionada']);
            $arItem->setCantidadReservada($arLotes['cantidadReservada']);
            $arItem->setCantidadExistencia($arLotes['existencia']);            
            $em->persist($arItem);
            $em->flush();            
        }
    }

    /**
     * Establecer las cantidades de remision a cero
     */
    public function RestablecerCantidadRemisionada () {
        $em = $this->getEntityManager();
        $strDql = "UPDATE BrasaInventarioBundle:InvLote l SET l.cantidadRemisionada = 0";
        $objQuery = $em->createQuery($strDql);
        $arResultado = $objQuery->getResult();        
        
        $strDql = "UPDATE BrasaInventarioBundle:InvItem l SET l.cantidadRemisionada = 0";
        $objQuery = $em->createQuery($strDql);
        $arResultado = $objQuery->getResult();        
    }    
    
}