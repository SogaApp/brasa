<?php

namespace Brasa\RecursoHumanoBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RhuLiquidacionRepository extends EntityRepository {
    
    public function listaDQL($strIdentificacion = "") {        
        $dql   = "SELECT l, e FROM BrasaRecursoHumanoBundle:RhuLiquidacion l JOIN l.empleadoRel e WHERE l.codigoLiquidacionPk <> 0";
        if($strIdentificacion != "" ) {
            $dql .= " AND e.numeroIdentificacion LIKE '%" . $strIdentificacion . "%'";
        }

        $dql .= " ORDER BY l.codigoLiquidacionPk";
        return $dql;
    }  
    
    public function liquidar($codigoLiquidacion) {        
        $em = $this->getEntityManager();
        $arLiquidacion = new \Brasa\RecursoHumanoBundle\Entity\RhuLiquidacion();
        $arLiquidacion = $em->getRepository('BrasaRecursoHumanoBundle:RhuLiquidacion')->find($codigoLiquidacion); 
        $dateFechaUltimoPago = $em->getRepository('BrasaRecursoHumanoBundle:RhuPago')->devuelveFechaUltimoPago($arLiquidacion->getCodigoEmpleadoFk());                
        if($dateFechaUltimoPago != null) {
            $arLiquidacion->setFechaUltimoPago(date_create($dateFechaUltimoPago));
            if($arLiquidacion->getFechaUltimoPago() < $arLiquidacion->getFechaHasta()) {
                $diasAdicionales = $arLiquidacion->getFechaUltimoPago()->diff($arLiquidacion->getFechaHasta());
                $diasAdicionales = $diasAdicionales->format('%a');
                $douIBCAdicional = ($arLiquidacion->getContratoRel()->getVrSalario()/30) * $diasAdicionales;
                $arLiquidacion->setVrIngresoBaseCotizacionAdicional($douIBCAdicional);                
                $arLiquidacion->setDiasAdicionalesIBC($diasAdicionales);
            }
        }
        if($arLiquidacion->getLiquidarCesantias() == 1) {
            if($arLiquidacion->getContratoRel()->getFechaUltimoPagoCesantias() <= $arLiquidacion->getContratoRel()->getFechaDesde()) {
                $intDiasCesantias = $arLiquidacion->getContratoRel()->getFechaDesde()->diff($arLiquidacion->getContratoRel()->getFechaHasta());
                $intDiasCesantias = $intDiasCesantias->format('%a');
                $arLiquidacion->setDiasCesantias($intDiasCesantias);
                $douIBC = $em->getRepository('BrasaRecursoHumanoBundle:RhuPago')->devuelveIBCFecha($arLiquidacion->getCodigoEmpleadoFk(), $arLiquidacion->getContratoRel()->getFechaDesde()->format('Y-m-d'), $arLiquidacion->getContratoRel()->getFechaHasta()->format('Y-m-d'));
            }            
        }

        if($arLiquidacion->getContratoRel()->getFechaUltimoPagoPrimas() <= $arLiquidacion->getContratoRel()->getFechaDesde()) {
            $intDiasPrimas = $arLiquidacion->getContratoRel()->getFechaDesde()->diff($arLiquidacion->getContratoRel()->getFechaHasta());
            $intDiasPrimas = $intDiasPrimas->format('%a');
        }
        if($arLiquidacion->getContratoRel()->getFechaUltimoPagoVacaciones() <= $arLiquidacion->getContratoRel()->getFechaDesde()) {
            $intDiasVacaciones = $arLiquidacion->getContratoRel()->getFechaDesde()->diff($arLiquidacion->getContratoRel()->getFechaHasta());
            $intDiasVacaciones = $intDiasVacaciones->format('%a');
        }        
                
        $arLiquidacion->setDiasPrimas($intDiasPrimas);
        $arLiquidacion->setDiasVacaciones($intDiasVacaciones);
        
        $em->flush();
        return true;
    }        
}